
////////////////////////////////////////////////
//Creating Header///////////////////////////////
////////////////////////////////////////////////

//ILP generation -- array of elements to do calculations on
//IPC data flow generation -- TODO for figuring out
//MPKI array for random number to mispredict branches
//MPKI for cache accesses -- either random number or strided access for conflicting address

//prefill array of random numbers

#include "../include/gem5/m5ops.h"
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define ILP_ARRAYS 4 //consecutive non-dependent instructions per iteration
#define TOTAL_LOOPS 40000 // number of total loops
#define SINGLE_LOOP_ITERATION 200

#define MPKI_branch 0// MISPREDICTIONS PER 1000 LOOPS
#define MPKI_cache 0 // CACHE MISSES PER 1000 LOOPS
#define strided_conflicts 1024
#define INVOCATION_FREQ 100 // Invocations per 1000 loops. Each 1 is 0.1% increase

#define NUM_LOOPS 200 // single loop iterations * this value is total loops
#define WARMUP_LOOPS 5 // number of loops before getchar() is called
#define ASSOCIATIVITIES_TESTED 60 // number of times a set is accessed for cache miss array
#define CACHE_MISS_SIZE 61440//(8kB cache per associativity)/ (8-byte floats) * associativities tested
#define BRANCH_MISS_SIZE (TOTAL_LOOPS/SINGLE_LOOP_ITERATION+1)*MPKI_branch*2 // +1 for rounding
#define DEPENDENCY_BEFORE 0.0 // number of accl loops w/ dependencies = floor(dependency_before * accl loops)
#define DEPENDENCY_AFTER 0.0 // number of reg loops after accl w/ dependencies = floor(dependency_after * accl loops)
 
////////////////////////////////////////////////
//Done Creating Header//////////////////////////
////////////////////////////////////////////////


void init(float array[SINGLE_LOOP_ITERATION][ILP_ARRAYS]){ // initializes random number array
 
	int i,j;
	srand(time(NULL));
 
	for(j=0; j<ILP_ARRAYS; j++){
		for(i=0; i<SINGLE_LOOP_ITERATION; i++){
			array[i][j] = (float)rand() / (float)RAND_MAX;
		}
	}
}
void init_accum(float array[ILP_ARRAYS]){ // initializes random number array
 
	int j;
 
	for(j=0; j<ILP_ARRAYS; j++){
		array[j] = 0;
	}
}
void init_cache_miss_array(float **array){ // initializes random number array
 
	int i,j,c;
	array = (float **)malloc(sizeof(float *) * CACHE_MISS_SIZE);
	array[0] = (float *)malloc(sizeof(float) * ILP_ARRAYS * CACHE_MISS_SIZE);
	for(i=0; i<CACHE_MISS_SIZE; i++)
		array[i] = (*array + ILP_ARRAYS * i);
	for(c=0; c<ASSOCIATIVITIES_TESTED; c++){ // only populate ones we will access
		for(j=0; j<ILP_ARRAYS; j++){
			array[c*strided_conflicts][j] = (float)rand() / (float)RAND_MAX;;
		}
	}
}
void init_branch_miss_array(float array[BRANCH_MISS_SIZE][ILP_ARRAYS]){ // initializes random number array
 
    int i,j;
	srand(time(NULL));
 
	for(j=0; j<ILP_ARRAYS; j++){
		for(i=0; i<BRANCH_MISS_SIZE; i++){
			array[i][j] = (float)rand() / (float)RAND_MAX;
		}
	}
}
int main(){
	float random_nums[BRANCH_MISS_SIZE][ILP_ARRAYS];
	float array [SINGLE_LOOP_ITERATION][ILP_ARRAYS]; // number of accesses for ILP
	float accum[ILP_ARRAYS]; // where math will be held
	float **cache_miss_array; // where cache miss accesses will be held
 float accl_accum0 ; // accl accumulation -- also variable used for dependencies
 float accl_accum1 ; // accl accumulation -- also variable used for dependencies
 float accl_accum2 ; // accl accumulation -- also variable used for dependencies
 float accl_accum3 ; // accl accumulation -- also variable used for dependencies
 float accl_accum4 ; // accl accumulation -- also variable used for dependencies
 float accl_accum5 ; // accl accumulation -- also variable used for dependencies
 float accl_accum6 ; // accl accumulation -- also variable used for dependencies
 float accl_accum7 ; // accl accumulation -- also variable used for dependencies
 float accl_accum8 ; // accl accumulation -- also variable used for dependencies
 float accl_accum9 ; // accl accumulation -- also variable used for dependencies
 
 // instantiate cache_miss_array
	int i,j,c;
	cache_miss_array = (float **)malloc(sizeof(float *) * CACHE_MISS_SIZE);
	cache_miss_array[0] = (float *)malloc(sizeof(float) * ILP_ARRAYS * CACHE_MISS_SIZE);
	for(i=0; i<CACHE_MISS_SIZE; i++)
		cache_miss_array[i] = (*cache_miss_array + ILP_ARRAYS * i);
 // done with instantiate cache_miss_array
 
 
 
 int a=0;
 int b=0;
 c=0;
 i=0;
 int l=0;
 float rand_acc=0;
 
	init_branch_miss_array(random_nums); 
	init(array);
	init_accum(accum);
	init_cache_miss_array(cache_miss_array);
 	//read random numbers to try to avoid cache misses
	for(int v=0; v<BRANCH_MISS_SIZE; v++){ 
		for (int w=0; w<ILP_ARRAYS; w++){ 
			rand_acc += random_nums[v][w];
		}
	}
printf("rand_acc is %f\n",rand_acc);
 // add gem5 instruction here to dump stats here
for(int zz=0; zz< NUM_LOOPS; zz++){ //number of total loop iterations
	if(zz == WARMUP_LOOPS) { // done warmup
 		// add gem5 instruction here to dump stats here
          m5_dump_reset_stats(0,0); // dump stats to start collecting after warmup loops completed
	}
  i=0;
  a=0;
     //Regular loop 1
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 2 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 3 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 4 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 5 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 6 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 7 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 8
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 9 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 10
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 11 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 12 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 13
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 14 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 15 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 16 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 17 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 18 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 19 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 20 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 21 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 22 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 23 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 24 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 25 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 26 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 27 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 28
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 29 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 30 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 31
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 32 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 33 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 34 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 35 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 36 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 37 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 38 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 39 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 40 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 41 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 42 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 43 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 44
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 45 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 46 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 47 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 48 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 49
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 50 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 51 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 52 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 53 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 54 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 55 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 56 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 57 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 58 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 59 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 60 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 61 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 62
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 63 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 64
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 65 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 66 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 67 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 68 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 69 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 70 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 71 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 72
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 73
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 74
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 75
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 76 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 77 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 78 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 79
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 80 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 81 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 82 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 83 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 84 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 85 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 86
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 87 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 88
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 89 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 90
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 91 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 92
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 93 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 94 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 95 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 96 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 97 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 98
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 99
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 100 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 101 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 102 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 103 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 104 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 105 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 106 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 107 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 108 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 109 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 110 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 111
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 112 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 113 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 114
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 115 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 116 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 117 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 118 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 119 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 120
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 121 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 122
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 123 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 124 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 125 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 126 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 127 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 128 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 129 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 130 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 131 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 132 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 133 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 134 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 135 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 136
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 137 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 138 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 139 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 140 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 141 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 142
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 143 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 144
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 145 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 146
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 147
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 148 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 149 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 150
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 151 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 152 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 153 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 154
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 155 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 156 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 157 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 158 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 159 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 160 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 161 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 162
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 163
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 164 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 165 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 166 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 167 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 168 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 169 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 170 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 171
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 172 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 173 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 174 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 175
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 176
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 177 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 178 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 179 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 180 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 181
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 182 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 183 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 184 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 185 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 186
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 187
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 188
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 189 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 190 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 191 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 192 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 193 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 194
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 195 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 196 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 197
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 198 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 199
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 200 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 201 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 202 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 203 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 204 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 205 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 206 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 207 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 208 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 209 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 210 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 211 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 212 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 213 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 214
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 215 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 216
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 217 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 218 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 219 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 220 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 221 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 222 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 223
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 224 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 225 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 226 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 227 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 228 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 229 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 230 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 231 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 232 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 233 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 234 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 235 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 236
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 237 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 238 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 239 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 240 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 241 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 242 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 243 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 244 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 245 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 246 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 247
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 248 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 249 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 250
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
  i=0;
  a=0;
     //Regular loop 251
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 252 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 253 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 254
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 255
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 256 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 257 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 258 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 259
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 260 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 261 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 262 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 263 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 264 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 265 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 266 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 267 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 268 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 269
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 270 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 271 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 272 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 273 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 274 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 275 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 276
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 277
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 278 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 279 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 280 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 281 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 282 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 283 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 284 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 285 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 286
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 287 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 288 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 289 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 290
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 291 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 292 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 293
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 294 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 295 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 296 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 297 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 298 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 299 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 300 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 301 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 302 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 303 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 304 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 305 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 306
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 307
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 308 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 309 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 310 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 311 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 312 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 313 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 314 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 315
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 316 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 317 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 318
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 319 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 320 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 321
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 322 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 323 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 324
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 325 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 326 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 327 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 328 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 329 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 330 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 331 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 332 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 333 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 334
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 335 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 336 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 337 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 338
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 339 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 340 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 341 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 342 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 343 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 344 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 345 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 346 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 347 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 348 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 349 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 350 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 351 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 352 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 353 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 354 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 355 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 356 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 357 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 358
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 359 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 360 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 361 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 362
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 363
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 364
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 365 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 366 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 367 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 368 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 369 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 370
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 371 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 372
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 373
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 374 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 375 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 376 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 377 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 378 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 379 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 380 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 381 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 382
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 383
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 384 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 385
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 386 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 387 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 388
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 389 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 390 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 391 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 392 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 393 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 394 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 395
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 396 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 397 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 398 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 399 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 400 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 401
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 402 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 403 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 404
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 405 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 406 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 407 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 408 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 409 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 410
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 411 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 412 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 413 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 414 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 415 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 416 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 417 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 418
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 419
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 420 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 421 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 422 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 423 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 424 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 425 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 426
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 427
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 428
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 429 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 430 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 431 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 432 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 433 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 434 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 435 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 436 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 437 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 438 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 439
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 440 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 441 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 442 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 443 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 444
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 445 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 446 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 447 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 448 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 449
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 450 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 451 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 452 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 453 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 454 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 455 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 456
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 457 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 458 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 459 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 460 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 461 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 462
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 463 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 464 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 465
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 466 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 467 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 468 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 469 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 470
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 471 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 472 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 473
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 474 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 475 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 476 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 477 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 478 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 479
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 480 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 481 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 482 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 483 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 484 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 485 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 486 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 487 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 488 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 489 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 490 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 491 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 492 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 493 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 494 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 495
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 496 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 497
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 498 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 499 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 500
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 501 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 502 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 503 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 504 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 505 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 506 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 507 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 508 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 509 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 510 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 511 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 512 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 513
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 514 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 515 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 516 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 517 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 518 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 519 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 520 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 521 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 522 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 523 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 524
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 525 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 526 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 527 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 528 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 529 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 530 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 531 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 532 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 533 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 534 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 535 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 536
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 537
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 538 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 539 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 540
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 541 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 542
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 543 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 544 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 545 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 546 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 547 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 548 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 549 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 550 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 551
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 552 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 553
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 554 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 555 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 556 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 557
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 558 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 559 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 560 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 561 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 562 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 563 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 564
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 565 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 566 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 567 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 568
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 569
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 570 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 571 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 572
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 573 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 574 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 575 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 576
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 577 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 578
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 579 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 580 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 581 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 582
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 583 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 584 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 585 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 586 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 587
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 588 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 589
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 590 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 591 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 592 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 593 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 594 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 595
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 596 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 597 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 598 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 599
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 600 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 601
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 602 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 603 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 604 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 605 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 606 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 607 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 608 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 609
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 610 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 611 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 612 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 613
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 614 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 615
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 616 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 617 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 618 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 619 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 620 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 621 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 622 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 623 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 624
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 625 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 626 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 627
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 628 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 629 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 630 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 631 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 632 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 633 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 634
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 635 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 636 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 637 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 638
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 639 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 640 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 641
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 642 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 643
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 644 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 645
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 646 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 647
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 648 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 649
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 650 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 651 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 652 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 653 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 654 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 655 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 656 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 657 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 658
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 659 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 660 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 661 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 662
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 663 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 664
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 665 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 666
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 667 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 668 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 669 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 670 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 671
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 672 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 673 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 674 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 675 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 676 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 677 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 678 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 679 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 680 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 681 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 682 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 683 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 684 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 685
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 686 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 687 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 688 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 689 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 690 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 691 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 692 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 693
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 694 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 695
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 696 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 697 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 698 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 699 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 700 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 701 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 702
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 703 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 704 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 705 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 706 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 707 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 708 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 709 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 710
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 711 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 712 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 713 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 714 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 715
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 716 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 717 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 718 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 719 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 720 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 721
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 722 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 723 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 724 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 725 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 726 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 727 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 728
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 729 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 730 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 731 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 732 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 733 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 734
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 735
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 736 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 737 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 738 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 739 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 740 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 741 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 742 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 743 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 744 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 745 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 746 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 747 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 748
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 749 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 750
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 751 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 752 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 753 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 754
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 755 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 756 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 757
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 758 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 759 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 760 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 761 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 762 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 763 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 764 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 765 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 766 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 767 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 768 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 769 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 770
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 771 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 772 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 773
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 774 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 775 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 776 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 777 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 778
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 779
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 780 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 781 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 782 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 783 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 784 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 785 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 786 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 787 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 788 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 789
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 790 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 791
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 792 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 793 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 794 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 795 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 796 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 797 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 798 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 799
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 800 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 801
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 802 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 803 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 804
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 805 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 806 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 807 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 808
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 809 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 810 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 811 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 812 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 813 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 814 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 815 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 816 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 817 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 818
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 819 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 820 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 821 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 822
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 823 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 824
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 825 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 826 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 827
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 828 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 829 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 830 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 831 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 832
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 833 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 834
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 835
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 836 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 837 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 838 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 839
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 840 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 841 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 842 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 843 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 844 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 845 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 846 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 847
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 848 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 849 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 850
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 851 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 852
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 853 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 854 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 855 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 856 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 857 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 858 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 859 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 860 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 861 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 862 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 863
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 864 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 865 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 866 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 867 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 868 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 869 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 870 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 871
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 872 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 873 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 874 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 875 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
  i=0;
  a=0;

     //Accelerator Loop 876 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 877 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 878 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 879 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 880 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 881 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 882 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 883 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 884 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 885
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 886
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 887 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 888 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 889
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 890 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 891 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 892
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 893 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 894 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 895 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 896 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 897 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 898
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 899 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 900 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 901 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 902
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 903 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 904
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 905 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 906
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 907 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 908 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 909
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 910 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 911 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 912 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 913
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 914 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 915 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 916
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 917 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 918 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 919 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 920 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 921 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 922
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 923 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 924 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 925 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 926 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 927 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 928 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 929 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 930 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 931 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 932
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 933 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 934 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 935 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 936 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 937 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 938 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 939 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 940 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 941 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 942 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 943
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 944
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 945
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 946 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 947 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 948 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 949 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 950 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 951 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 952 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 953 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 954 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 955 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 956 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 957 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 958 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 959 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 960
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 961
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 962
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 963 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 964 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 965 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 966 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 967 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 968 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 969
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 970 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 971 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 972 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 973 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 974 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 975 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 976 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 977 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 978
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 979
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 
     //Regular loop 980
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 981 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 982 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 983 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 984 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 985 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 986
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 987 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 988 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 989 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 990 Heng accl instruction
 accl_accum1 = accl_accum1 * accl_accum1; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 991 Heng accl instruction
 accl_accum2 = accl_accum2 * accl_accum2; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 992 Heng accl instruction
 accl_accum3 = accl_accum3 * accl_accum3; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 993 Heng accl instruction
 accl_accum4 = accl_accum4 * accl_accum4; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
     //Regular loop 994
	accum[0] += array[i][0];
	accum[1] += array[i][1];
	accum[2] += array[i][2];
	accum[3] += array[i][3];
    i++;  //increment new access
 

     //Accelerator Loop 995 Heng accl instruction
 accl_accum5 = accl_accum5 * accl_accum5; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 996 Heng accl instruction
 accl_accum6 = accl_accum6 * accl_accum6; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 997 Heng accl instruction
 accl_accum7 = accl_accum7 * accl_accum7; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 998 Heng accl instruction
 accl_accum8 = accl_accum8 * accl_accum8; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 999 Heng accl instruction
 accl_accum9 = accl_accum9 * accl_accum9; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 

     //Accelerator Loop 1000 Heng accl instruction
 accl_accum0 = accl_accum0 * accl_accum0; // our accelerator invocation
    a++;  //increment new accelerator access
    i++;  //increment new access
 
  i=0;
  a=0;
} // end NUM_LOOPS iteration
	for(int l=0; l<ILP_ARRAYS; l++){ // done with program, print
		printf("result of accum[%d] is %f\n", l, accum[l]);
	}
 // free memory
	return 0;
}